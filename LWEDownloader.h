// LWEDownloader.h
//
// Copyright (c) 2010, 2011 Long Weekend LLC
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
// associated documentation files (the "Software"), to deal in the Software without restriction,
// including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial
// portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
// NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#import <Foundation/Foundation.h>
#import <zlib.h>
#import "LWEFile.h"
#import "ASIHTTPRequest.h"
#import "ModalTaskViewController.h"

// For ZIP extension
#define CHUNK 16384

#define HTTP_CODE_200_FOUND 200

extern NSString * const LWEDownloaderStateUpdated;
extern NSString * const LWEDownloaderErrorDomain;

/** State machine for the downloader */
typedef enum LWEDownloaderState
{
  kDownloaderReady,                   //! Downloader ready to go
  kDownloaderCancelled,               //! Downloader cancelled
  kDownloaderInsufficientSpace,       //! Insufficient space on disk to store file
  kDownloaderRetrievingMetaData,      //! Retrieving data about to-be-downloaded package (headers)
  kDownloaderRetrievingData,          //! Retrieving actual data
  kDownloaderPaused,                  //! Data retrieval paused
  kDownloaderNetworkFail,             //! Network lost/timeout (no data within certain time period)
  kDownloaderDownloadComplete,        //! Download complete (no more data)
  kDownloaderDecompressing,           //! Unzipping downloaded file
  kDownloaderDecompressFail,          //! Downloaded, but unzip failed (need to delete download file bf trying again)
  kDownloaderInstallFail,             //! Downloaded, unzipped, but not installed properly
  kDownloaderSuccess                  //! Downloaded & verified
} LWEDownloaderState;

/**
 * Strict protocol - if the installer delegate does not implement installPluginWithPath: , this should fail
 */
@protocol LWEDownloaderInstallerDelegate <NSObject>
@required
/** Returns YES if install was successful, NO on failure */
- (BOOL)installPluginWithPath:(NSString *)filename;
@end

/**
 * Generalized downloader that retrieves files via HTTP asynchronously and optionally unzips them
 */
@interface LWEDownloader : NSObject <ASIHTTPRequestDelegate, ModalTaskViewDelegate>

{
  CGFloat progress;
  NSString *_compressedFilename;      //! Interim (full path) filename to be used if receiving compressed file - generated by the class
  
  //! "Private" variable holding request instance
  ASIHTTPRequest *_request;
  
  NSInteger statusCode;
  int requestSize;
  
  BOOL _remoteFileIsGzipCompressed;   //! Is the remote URL a Gzip file?
  BOOL _unzipShouldCancel;            //! State variable to communicate w/ background unzip thread
}

- (void) setProgressFromBackgroundThread:(NSNumber*)tmpNum;

- (id) initWithTargetURL: (NSString *) target targetPath:(NSString*)targetFilename;

// Delegate methods for the ModalTaskViewController
- (BOOL) isFailureState;
- (int) getFailureState;
- (BOOL) isSuccessState;
- (void) startTask;
- (void) cancelTask;
- (void) resetTask;

// Unzip file we have just downloaded - designed for background thread
- (BOOL) _unzipDownloadedFile;

// Internal method to kick off delegate
- (void) _verifyDownload;

//! Method that can (and should) be delegated via  LWEDownloaderInstallerDelegate protocol
- (BOOL) installPluginWithPath:(NSString *)filename;

@property CGFloat progress;

//! HTTP address of the file to get
@property (nonatomic, retain) NSURL *targetURL;

//! Full path filename where the downloaded data will be placed
@property (nonatomic, retain) NSString *targetFilename;

//! Internal class state - where are we in the download process (cf _downloaderStates)
@property (readonly) LWEDownloaderState downloaderState;

//! Status messages et al for observers
@property (nonatomic, retain) NSString *taskMessage;
@property (nonatomic, retain) NSString *statusMessage;
@property (assign, nonatomic, readwrite) id<LWEDownloaderInstallerDelegate> delegate;

@end
